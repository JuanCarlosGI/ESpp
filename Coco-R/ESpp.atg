using System.Collections.Generic;

COMPILER ESpp

CHARACTERS
	digit = '0'..'9'.
	lower = 'a'..'z'.
	upper = 'A'..'Z'.
	eol = '\r' + '\n'.
	noQuote = ANY - '\"' - eol.

TOKENS
	id = lower{['_'](lower|upper|digit)}.
	ctestr = '"' {noQuote} '"'.
	cteent = digit{digit}.
	ctedbl = digit{digit}'.'digit{digit}.
	lpar = '('.

IGNORE eol + '\t'

PRODUCTIONS
	ESpp = Program	(. var main = currentCodeBlock.SearchForFunctionScope("main"); main.CommandList.ExecuteBy(this); .)
		.

	Program	= Vars Funs Main.

	Vars = "variables" ':' {Declaracion}.
	
	Funs = "funciones" ':' {						(. Type funType; .)
		(
			Tipo<out funType>
			|"rutina"								(. funType = Type.Rutina; .)
		)
		id											(. var funName = t.val; .)
		'('											(. var vars = new List<Variable>(); .)
		[											(. Type tipo; .)
			Tipo<out tipo> id						(. vars.Add(new Variable(){Name=t.val, Type=tipo}); .) 
			{
				',' Tipo<out tipo> id				(. vars.Add(new Variable(){Name=t.val, Type=tipo}); .) 
			}
		] ')'										(. addFunction(funName, funType, vars); .)
		Bloque<funName, vars.ToArray()>}.

	Main = "main" Bloque<"main", new Variable[]{}>.
	
	Declaracion =					(. Type tipo; bool isArr = false; int size = 0; .)
		Tipo<out tipo> 
		[ TipoArr<out size>			(. isArr = true; .)
		] id						(. addVariable(t.val, tipo, isArr, size); .) 
		{ ',' id					(. addVariable(t.val, tipo, isArr, size); .) 
		} ';'.

	Tipo<out Type tipo> =	(. Type tipoAux = Type.Error; .)
		(
			"entero"		(. tipoAux = Type.Entero; .)
			| "decimal"		(. tipoAux = Type.Decimal; .)
			| "booleano"	(. tipoAux = Type.Booleano; .)
			| "cadena"		(. tipoAux = Type.Cadena; .)
		)					(. tipo = tipoAux; .)	
		.

	TipoArr<out int length> = '[' cteent (. length = int.Parse(t.val); .) ']'.
	
	Bloque<string name, Variable[] parameters> =						
		'{'										(. createNewSymbolTable(name, new List<Variable>(parameters)); .)
		{
			Declaracion 
			| Condicion 
			| Ciclo 
			| Impresion 
			| IF(FollowedByLPar()) Funcion ';' 
			| Asignacion} 
		'}'										(. currentCodeBlock = currentCodeBlock.Parent; .)
		.

	Asignacion =					(. Variable variable; .)
		Variable<out variable>		(. symbolStack.Push(variable); .)
		'=' Expresion ';'			(. doAssign(); .)
		.

	Funcion = 
		id				(. string name = t.val; checkFunctionExists(name); .)
		'('				(. var parameters = new List<object>(); .)
		[ Expresion		(. parameters.Add(""); .)
		{',' Expresion	(. parameters.Add(""); .)
		}] ')'			(. checkParamAmount(name, parameters.Count); .)
		.

	Condicion = "si" '(' Expresion ')' Bloque<"if", new Variable[]{}>  ["sino" Bloque<"else", new Variable[]{}>].
	
	Ciclo = "mientras" '(' Expresion ')' Bloque<"while", new Variable[]{}>.
	
	Impresion = "imprimir" '(' Expresion {',' Expresion} ')' ';'.
	
	Variable<out Variable variable> = 
		id							(. string name = t.val; checkVariableExists(name); var symbol = currentCodeBlock.Search(name); variable = symbol as Variable; .) 
		['['						(. checkIsArray(name); variable=(symbol as VariableArray).Variables[0]; .)
		 Expresion ']'].

	Expresion =
		Exp
		{
			(
				"&&"	(. operatorStack.Push(Operator.And); .)
				|"||"	(. operatorStack.Push(Operator.Or); .)
			) 
			Exp			(. doPendingLogical(); .)
		}.
	
	Exp = 
		Expt
		[
			(
				'>'		(. operatorStack.Push(Operator.GreaterThan); .)
				|'<'	(. operatorStack.Push(Operator.LessThan); .)
				|">="	(. operatorStack.Push(Operator.GreaterEqual); .)
				|"<="	(. operatorStack.Push(Operator.LessEqual); .)
				|"<>"	(. operatorStack.Push(Operator.Different); .)
				|"=="	(. operatorStack.Push(Operator.Equality); .)
			) 
			Expt		(. doPendingRelational(); .)
		].
	
	Expt = 
		Termino
		{
			(
				'+'		(. operatorStack.Push(Operator.Sum); .) 
				| '-'	(. operatorStack.Push(Operator.Minus); .)
			) 
			Termino		(. doPendingSum(); .)
		}.
	
	Termino = 
		Factor
		{
			(
				'*'		(. operatorStack.Push(Operator.Multiply); .) 
				|'/'	(. operatorStack.Push(Operator.Divide); .)
				|'%'	(. operatorStack.Push(Operator.Modulo); .)
			) 
			Factor		(. doPendingMultiplication(); .)
		}.
	
	Factor = 
		(
			'('				(. operatorStack.Push(Operator.FakeLimit); .)
			Expresion 
			')'				(. operatorStack.Pop(); .)
		) 
		| 
		(
			[('+' | '-')]			(. DirectValueSymbol symbol; .)
			Constante<out symbol>	(. symbolStack.Push(symbol); .)
		).
	
	Constante<out DirectValueSymbol sym> = (. sym = null; .)
		(cteent							(. sym = constBuilder.IntConstant(t.val); .)
		| ctedbl						(. sym = constBuilder.DecConstant(t.val); .)
		| Ctebol						(. sym = constBuilder.BoolConstant(t.val); .)
		| ctestr						(. sym = constBuilder.StrConstant(t.val); .)
		| Aleatorio						(. sym = constBuilder.IntConstant("10"); .)
		| Lectura						(. sym = constBuilder.StrConstant("100"); .)
		| IF(FollowedByLPar()) Funcion  (. sym = constBuilder.IntConstant("1000"); .)
		|								(. Variable variable; .)
			Variable<out variable>		(. sym = variable; .)
		).
	
	Aleatorio = "aleatorio" '(' ')'.
	
	Lectura = "lectura" '(' ')'.
	
	Ctebol = "verdadero" | "falso".

END ESpp.