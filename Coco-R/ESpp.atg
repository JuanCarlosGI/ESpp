using System.Collections.Generic;
using System.Linq;

COMPILER ESpp

CHARACTERS
	digit = '0'..'9'.
	lower = 'a'..'z'.
	upper = 'A'..'Z'.
	eol = '\r' + '\n'.
	noQuote = ANY - '\"' - eol.

TOKENS
	id = lower{['_'](lower|upper|digit)}.
	ctestr = '"' {noQuote} '"'.
	cteent = digit{digit}.
	ctedbl = digit{digit}'.'digit{digit}.
	lpar = '('.

IGNORE eol + '\t'

PRODUCTIONS
	ESpp = Program.

	Program	= Vars Funs Main.

	Vars = "variables" ':' {Declaracion}.
	
	Funs = "funciones" ':' {									(. Type funType; .)
		(
			Tipo<out funType>
			|"rutina"											(. funType = Type.Rutina; .)
		)
		id														(. var funName = t.val; .)
		'('														(. var vars = new List<Variable>(); .)
		[														(. Type tipo; .)
			Tipo<out tipo> id									(. vars.Add(new Variable(){Name=t.val, Type=tipo}); .) 
			{
				',' Tipo<out tipo> id							(. vars.Add(new Variable(){Name=t.val, Type=tipo}); .) 
			}
		] ')'													(. AddFunction(funName, funType, vars); .)
																(. DirectValueSymbol returns; .)
		Bloque<funName, vars.ToArray(), funType != Type.Rutina, out returns>
																(. AddReturns(funName, returns); LinkFunctionBody(funName); .)
		}.


	Main =					(. DirectValueSymbol dummy; .) 
		"main" Bloque<"main", new Variable[]{}, false, out dummy>.
	
	Declaracion =					(. Type tipo; bool isArr = false; int size = 0; .)
		Tipo<out tipo> 
		[ TipoArr<out size>			(. isArr = true; .)
		] id						(. AddVariable(t.val, tipo, isArr, size); .) 
		{ ',' id					(. AddVariable(t.val, tipo, isArr, size); .) 
		} ';'.

	Tipo<out Type tipo> =	(. Type tipoAux = Type.Error; .)
		(
			"entero"		(. tipoAux = Type.Entero; .)
			| "decimal"		(. tipoAux = Type.Decimal; .)
			| "booleano"	(. tipoAux = Type.Booleano; .)
			| "cadena"		(. tipoAux = Type.Cadena; .)
		)					(. tipo = tipoAux; .)	
		.

	TipoArr<out int length> = '[' cteent (. length = int.Parse(t.val); .) ']'.
	
	Bloque<string name, Variable[] parameters, bool isFunction, out DirectValueSymbol returns> =						
		'{'										(. CreateNewScope(name, new List<Variable>(parameters)); DoPushDefaults(); .)
												(. returns = null; .)
		{
			Declaracion 
			| Condicion 
			| Ciclo 
			| Impresion 
			| IF(FollowedByLPar())							(. Function function; List<DirectValueSymbol> paras; .) 
				Funcion<out function, out paras> ';'		(. DoRoutine(function, paras); .) 
			| Asignacion} 
			(IF(isFunction) "regresa" Expresion ';'			(. returns = _symbolStack.Pop(); _currentScope.Returns = returns; .)
			|)
		'}'													(. DoPopLocals(); _currentScope = _currentScope.Parent; .)
		.

	Asignacion =					(. Variable variable; .)
		Variable<out variable>		(. _symbolStack.Push(variable); .)
		'=' Expresion ';'			(. DoAssign(); .)
		.

	Funcion<. out Function function, out List<DirectValueSymbol> parameters .> = 
		id				(. string name = t.val; CheckFunctionExists(name); .)
		'('				(. parameters = new List<DirectValueSymbol>(); .)
		[ Expresion		(. parameters.Add(_symbolStack.Pop()); .)
		{',' Expresion	(. parameters.Add(_symbolStack.Pop()); .)
		}] ')'			(. CheckParamAmount(name, parameters.Count); .)
						(. function = _currentScope.Search(name) as Function; .)
		.

	Condicion = 
		"si" '(' Expresion ')'							(. var condition = _symbolStack.Pop(); DirectValueSymbol returnsDummy; .)
		Bloque<"if", new Variable[]{}, false, out returnsDummy>					(. var ifBlock = _currentScope.Children.Last().CommandList; CommandList elseBlock = null; .)
		[
			"sino" Bloque<"else", new Variable[]{}, false, out returnsDummy>		(. elseBlock = _currentScope.Children.Last().CommandList; .)
		]												(. DoIfElse(condition, ifBlock, elseBlock); .)
		.
	
	Ciclo = 
		"mientras" '('							(. CreateNewScope("Expression", new List<Variable>());  DirectValueSymbol returnsDummy; .) 
		Expresion								(. var expression = _currentScope.CommandList; var result = _symbolStack.Pop(); .)
		')'										(. _currentScope = _currentScope.Parent; .)
		 Bloque<"while", new Variable[]{}, false, out returnsDummy>		(. var whileBlock = _currentScope.Children.Last().CommandList; DoWhile(expression, result, whileBlock); .)
		 .
	
	Impresion = "imprimir" '('		(. var expressions = new List<DirectValueSymbol>(); .)
		Expresion					(. expressions.Add(_symbolStack.Pop()); .)
		{',' Expresion				(. expressions.Add(_symbolStack.Pop()); .)
		} ')' ';'					(. DoPrint(expressions); .)
		.
	
	Variable<out Variable variable> = 
		id							(. string name = t.val; CheckVariableExists(name); var symbol = _currentScope.Search(name); variable = symbol as Variable; .) 
		['['						
		 Expresion ']'				(. CheckIsArray(name); VariableArray array =(symbol as VariableArray); DoAssignIndex(array,_symbolStack.Pop()); variable = array; .)
		 ].

	Expresion =
		Exp
		{
			(
				"&&"	(. _operatorStack.Push(Operator.And); .)
				|"||"	(. _operatorStack.Push(Operator.Or); .)
			) 
			Exp			(. DoPendingLogical(); .)
		}.
	
	Exp = 
		Expt
		[
			(
				'>'		(. _operatorStack.Push(Operator.GreaterThan); .)
				|'<'	(. _operatorStack.Push(Operator.LessThan); .)
				|">="	(. _operatorStack.Push(Operator.GreaterEqual); .)
				|"<="	(. _operatorStack.Push(Operator.LessEqual); .)
				|"<>"	(. _operatorStack.Push(Operator.Different); .)
				|"=="	(. _operatorStack.Push(Operator.Equality); .)
			) 
			Expt		(. DoPendingRelational(); .)
		].
	
	Expt = 
		Termino
		{
			(
				'+'		(. _operatorStack.Push(Operator.Sum); .) 
				| '-'	(. _operatorStack.Push(Operator.Minus); .)
			) 
			Termino		(. DoPendingSum(); .)
		}.
	
	Termino = 
		Factor
		{
			(
				'*'		(. _operatorStack.Push(Operator.Multiply); .) 
				|'/'	(. _operatorStack.Push(Operator.Divide); .)
				|'%'	(. _operatorStack.Push(Operator.Modulo); .)
			) 
			Factor		(. DoPendingMultiplication(); .)
		}.
	
	Factor =				(. var negative = false; .)
		[('+' | '-'			(. negative = true; .)
		)]
		((
			'('				(. _operatorStack.Push(Operator.FakeLimit); .)
			Expresion 
			')'				(. _operatorStack.Pop(); .)
		) 
		| 
		(							(. DirectValueSymbol symbol; .)
			Constante<out symbol>	(. _symbolStack.Push(symbol); .)
		))							(. if(negative) doNegative(); .)
		.
	
	Constante<out DirectValueSymbol sym> = (. sym = null; .)
		(cteent							(. sym = _constBuilder.IntConstant(t.val); .)
		| ctedbl						(. sym = _constBuilder.DecConstant(t.val); .)
		| Ctebol						(. sym = _constBuilder.BoolConstant(t.val); .)
		| ctestr						(. sym = _constBuilder.StrConstant(t.val); .)
		| Aleatorio						(. sym = _constBuilder.DecConstant("0"); DoRandom(sym); .)
		| Lectura						(. sym = _constBuilder.StrConstant(""); DoRead(sym); .)
		| IF(FollowedByLPar())			(. Function function; List<DirectValueSymbol> parameters;.)
			Funcion<out function, out parameters>		(. var result = _varBuilder.NewVariable(function.Type); DoFunction(function, parameters, result); sym = result; _currentScope.Add(sym); .)
		|								(. Variable variable; .)
			Variable<out variable>		(. sym = variable; .)
		).
	
	Aleatorio = "aleatorio" '(' ')'.
	
	Lectura = "lectura" '(' ')'.
	
	Ctebol = "verdadero" | "falso".

END ESpp.